. $PSScriptRoot\..\..\..\Support\PowerShell\Build.ps1

function MockVersion
{
    param(
        [Parameter(Position = 0)]
        $Version = "1.2.3",

        [Parameter(Position = 1)]
        $AssemblyVersion = "1.2.0.0",

        [Parameter(Position = 2)]
        $FileVersion = "1.2.3.4",

        [Parameter(Position = 3)]
        $ModuleVersion = "1.2.3",

        [Parameter(Position = 4)]
        $ReleaseNotes = "v1.2.3"
    )

    $versionProps = "$TestDrive\build\Version.props"
    New-Item $versionProps -ItemType File -Force | Out-Null

    Set-Content $versionProps @"
<!-- This code was generated by a tool. Any changes made manually will be lost -->
<!-- the next time this code is regenerated. -->

<Project>
  <PropertyGroup>
    <Version>$Version</Version>
    <AssemblyVersion>$AssemblyVersion</AssemblyVersion>
    <FileVersion>$FileVersion</FileVersion>
  </PropertyGroup>
</Project>
"@

    $versionFile = "$TestDrive\src\PrtgAPI\Properties\Version.cs"
    New-Item $versionFile -ItemType File -Force | Out-Null

    Set-Content $versionFile @"
// This code was generated by a tool. Any changes made manually will be lost
// the next time this code is regenerated.

using System.Reflection;

[assembly: AssemblyVersion("$AssemblyVersion")]
[assembly: AssemblyFileVersion("$FileVersion")]

"@

    $psd1 = "$TestDrive\src\PrtgAPI.PowerShell\PowerShell\Resources\PrtgAPI.psd1"
    New-Item $psd1 -ItemType File -Force | Out-Null


    Set-Content $psd1 @"
ModuleVersion = '$ModuleVersion'
        ReleaseNotes = 'Release Notes: https://github.com/lordmilko/PrtgAPI/releases/tag/$ReleaseNotes
"@

    Mock "Get-SolutionRoot" {
        return $TestDrive
    } -ModuleName PrtgAPI.Build
}

Describe "Set-PrtgVersion" -Tag @("PowerShell", "Build") {
    It "sets a version with Core" {

        MockVersion

        $result = Set-PrtgVersion 4.5.6

        $result.Package | Should Be "1.2.3 -> 4.5.6"
        $result.Assembly | Should Be "1.2.0.0 -> 4.5.0.0"
        $result.File | Should Be "1.2.3.4 -> 4.5.6.0"
        $result.Module | Should Be "1.2.3 -> 4.5.6"
        $result.ModuleTag | Should Be "v1.2.3 -> v4.5.6"
    }

    It "sets a version with Desktop" {
        MockVersion

        Mock "Test-CIIsWindows" {
            return $true
        } -ModuleName "CI"

        $result = Set-PrtgVersion 4.5.6 -Legacy

        $result.Package | Should Be "1.2.3 -> 4.5.6"
        $result.Assembly | Should Be "1.2.0.0 -> 4.5.0.0"
        $result.File | Should Be "1.2.3.4 -> 4.5.6.0"
        $result.Module | Should Be "1.2.3 -> 4.5.6"
        $result.ModuleTag | Should Be "v1.2.3 -> v4.5.6"
    }

    It "sets a version that is the same as some existing properties" {
        MockVersion "4.5.6"

        $result = Set-PrtgVersion 4.5.6

        $result.Package | Should Be "4.5.6"
        $result.Assembly | Should Be "1.2.0.0 -> 4.5.0.0"
        $result.File | Should Be "1.2.3.4 -> 4.5.6.0"
        $result.Module | Should Be "1.2.3 -> 4.5.6"
        $result.ModuleTag | Should Be "v1.2.3 -> v4.5.6"
    }
    
    It "sets the same version as current" {
        MockVersion

        $result = Set-PrtgVersion 1.2.3.4

        $result.Package | Should Be "1.2.3"
        $result.Assembly | Should Be "1.2.0.0"
        $result.File | Should Be "1.2.3.4"
        $result.Module | Should Be "1.2.3"
        $result.ModuleTag | Should Be "v1.2.3"
    }
}