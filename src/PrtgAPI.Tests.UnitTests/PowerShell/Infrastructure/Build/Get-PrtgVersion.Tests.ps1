. $PSScriptRoot\..\..\..\Support\PowerShell\Build.ps1

function Mock-GetContent
{
    Mock "Get-Content" {

        param($Path)

        if($Path -like "*Version.props")
        {
            return @"
<Project>
<PropertyGroup>
<Version>1.2.3</Version>
<AssemblyVersion>1.2.0.0</AssemblyVersion>
<FileVersion>1.2.3.4</FileVersion>
</PropertyGroup>
</Project>
"@
        }

        if($Path -like "*PrtgAPI.psd1")
        {
            New-ModuleManifest "$TestDrive\PrtgAPI.psd1" -ModuleVersion 1.2.3 -ReleaseNotes "Release Notes: https://github.com/lordmilko/PrtgAPI/releases/tag/v1.2.3`nblah"

            $gc = gcm Get-Content -CommandType Cmdlet

            return & $gc "$TestDrive\PrtgAPI.psd1"
        }

        if($Path -like "*Version.cs")
        {
            return @"
// This code was generated by a tool. Any changes made manually will be lost
// the next time this code is regenerated.

using System.Reflection;

[assembly: AssemblyVersion("1.2.0.0")]
[assembly: AssemblyFileVersion("1.2.3.4")]
"@
        }

        throw "Don't know how to handle path '$Path'"
    } -ModuleName CI
}

Describe "Get-PrtgVersion" -Tag @("PowerShell", "Build") {
    It "retrieves version information for Core" {

        Mock-GetContent

        InModuleScope CI {
            Mock "GetGitTag" {
                return "v1.2.2"
            }

            Mock Test-Path {
                return $true
            } -ParameterFilter { $Path -like "*.git" }

            Mock "Get-Command" {
                return [PSCustomObject]@{
                    Name = "git.exe"
                }
            } -ParameterFilter { $Name -eq "git" }
        }

        $info = Get-PrtgVersion

        $info.Package | Should Be "1.2.3"
        $info.Assembly | Should Be "1.2.0.0"
        $info.File | Should Be "1.2.3.4"
        $info.Module | Should Be "1.2.3"
        $info.ModuleTag | Should Be "v1.2.3"
        $info.PreviousTag | Should Be "v1.2.2"
    }

    It "retrieves version information got Desktop" {
        Mock-GetContent

        InModuleScope CI {
            Mock "GetGitTag" {
                return "v1.2.2"
            }

            Mock Test-Path {
                return $true
            } -ParameterFilter { $Path -like "*.git" }

            Mock "Get-Command" {
                return [PSCustomObject]@{
                    Name = "git.exe"
                }
            } -ParameterFilter { $Name -eq "git" }

            Mock "Test-CIIsWindows" {
                return $true
            }
        }

        $info = Get-PrtgVersion -Legacy

        $info.Package | Should Be "1.2.3"
        $info.Assembly | Should Be "1.2.0.0"
        $info.File | Should Be "1.2.3.4"
        $info.Module | Should Be "1.2.3"
        $info.ModuleTag | Should Be "v1.2.3"
        $info.PreviousTag | Should Be "v1.2.2"
    }

    It "ignores the previous git tag when the git command is missing" {
        Mock-GetContent

        InModuleScope "CI" {
            Mock "Get-Command" {
                param($Name)

                if($Name -eq "git")
                {
                    return "git"
                }

                throw "Don't know how to handle command '$Name'"
            } -ParameterFilter {
                $Name -ne "Get-Content"
            }

            Mock "GetGitTag" {
                throw "GetGitTag should not have been called"
            }

            Mock "Test-Path" {
                param($Path)

                if($Path -like "*.git")
                {
                    return $false
                }

                throw "Don't know to handle path '$Path'"
            } -ParameterFilter {
                $Path -notlike "*Version.props" -and $Path -notlike "*PrtgAPI.psd1"
            }
        }

        $info = Get-PrtgVersion

        $info.Package | Should Be "1.2.3"
        $info.Assembly | Should Be "1.2.0.0"
        $info.File | Should Be "1.2.3.4"
        $info.Module | Should Be "1.2.3"
        $info.ModuleTag | Should Be "v1.2.3"
        $info.PreviousTag | Should Be $null
    }

    It "ignores the previous git tag when the git folder is missing" {
        Mock-GetContent

        Mock "Get-Command" {
            param($Name)

            if($Name -eq "git")
            {
                return
            }

            throw "Don't know how to handle command '$Name'"
        } -ModuleName CI -ParameterFilter {
            $Name -ne "Get-Content"
        }

        $info = Get-PrtgVersion

        $info.Package | Should Be "1.2.3"
        $info.Assembly | Should Be "1.2.0.0"
        $info.File | Should Be "1.2.3.4"
        $info.Module | Should Be "1.2.3"
        $info.ModuleTag | Should Be "v1.2.3"
        $info.PreviousTag | Should Be $null
    }

    It "throws when package version does not match first three digits of file version" {

        Mock "Get-CIVersionInternal" {
            return [PSCustomObject]@{
                Package = "1.2.3"
                File = "1.2.0.4"
                Assembly = 0
                Module = 0
                ModuleTag = 0
            }
        } -ModuleName CI

        { Get-PrtgVersion -ErrorAction Stop } | Should Throw "Expected property 'Package' to be '1.2.0' but was '1.2.3' instead."
    }

    It "throws when assembly version does not match first two digits of file version" {
        Mock "Get-CIVersionInternal" {
            return [PSCustomObject]@{
                Package = "1.2.3"
                Assembly = "1.0.0.0"
                File = "1.2.3.4"
                Module = 0
                ModuleTag = 0
            }
        } -ModuleName CI
        
        { Get-PrtgVersion -ErrorAction Stop } | Should Throw "Expected property 'Assembly' to be '1.2.0.0' but was '1.0.0.0' instead."
    }

    It "throws when module version does not match first three digits of file version" {
        Mock "Get-CIVersionInternal" {
            return [PSCustomObject]@{
                Package = "1.2.3"
                Assembly = "1.2.0.0"
                File = "1.2.3.4"
                Module = "1.2.0"
                ModuleTag = 0
            }
        } -ModuleName CI
        
        { Get-PrtgVersion -ErrorAction Stop } | Should Throw "Expected property 'Module' to be '1.2.3' but was '1.2.0' instead."
    }

    It "throws when module tag does not match first three digits of file version" {
        Mock "Get-CIVersionInternal" {
            return [PSCustomObject]@{
                Package = "1.2.3"
                Assembly = "1.2.0.0"
                File = "1.2.3.4"
                Module = "1.2.3"
                ModuleTag = "v1.2.0"
            }
        } -ModuleName CI

        { Get-PrtgVersion -ErrorAction Stop } | Should Throw "Expected property 'ModuleTag' to be 'v1.2.3' but was 'v1.2.0' instead"
    }

    It "throws when module version is less than git version" {
        Mock "Get-CIVersionInternal" {
            return [PSCustomObject]@{
                Package = "1.2.3"
                Assembly = "1.2.0.0"
                File = "1.2.3.4"
                Module = "1.2.3"
                ModuleTag = "v1.2.3"
                PreviousTag = "v4.5.6"
            }
        } -ModuleName CI

        { Get-PrtgVersion -ErrorAction Stop } | Should Throw "Module tag 'v1.2.3' should be greater than or equal to previous release tag 'v4.5.6'."
    }

    It "doesn't throw terminating errors when an error occurs" {

        Mock "Get-CIVersionInternal" {
            return [PSCustomObject]@{
                Package = "1.2.3"
                Assembly = "1.2.0.0"
                File = "1.2.3.4"
                Module = "1.2.3"
                ModuleTag = "v1.2.0"
            }
        } -ModuleName CI

        Get-PrtgVersion -ErrorAction SilentlyContinue
    }
}