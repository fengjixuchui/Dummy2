using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;
using System.Xml.Serialization;

namespace PrtgAPI.Tests.IntegrationTests.Support
{
    [DebuggerDisplay("Id = {Id,nq}, Name = {Name,nq}, Description = {Description,nq}, Missing = {Missing}")]
    public class MissingSensorType
    {
        public string Id { get; set; }
        public string Name { get; set; }
        public bool Missing { get; set; }
        public string Description { get; set; }

        public MissingSensorType(string id, string name, string description, bool missing)
        {
            Id = id;
            Name = name;
            Description = description;
            Missing = missing;
        }
    }

    public class SensorTypeManager
    {
        public static List<MissingSensorType> GetMissingSensorTypes()
        {
            var client = new PrtgClient(Settings.ServerWithProto, Settings.UserName, Settings.Password);

            var types = client.GetSensorTypes();

            var knownValues = Enum.GetValues(typeof(PrtgClient).Assembly.GetType("PrtgAPI.SensorTypeInternal")).Cast<object>().ToList();

            var xmlEnumAttributes = knownValues.Select(v =>
            {
                var attribs = v.GetType().GetMember(v.ToString()).FirstOrDefault()?.GetCustomAttributes(typeof(XmlEnumAttribute), false);

                return attribs?.First();
            }).Where(a => a != null).Cast<XmlEnumAttribute>().ToList();

            var results = types.Select(t =>
            {
                var missing = !xmlEnumAttributes.Any(a => a.Name == t.Id);

                return new MissingSensorType(t.Id, t.Name, t.Description, missing);
            }).ToList();

            return results;
        }

        public static void UpdateSensorTypes()
        {
            var types = GetMissingSensorTypes();

            var missingCount = types.Count(t => t.Missing);

            if (missingCount > 0)
            {
                Logger.LogTestDetail($"    Adding {missingCount} missing types");

                var dll = new Uri(Assembly.GetExecutingAssembly().CodeBase);
                var root = dll.Host + dll.PathAndQuery + dll.Fragment;
                var rootStr = Uri.UnescapeDataString(root).ToLower();

                var thisProject = Assembly.GetExecutingAssembly().GetName().Name.ToLower();

                var prefix = rootStr.IndexOf(thisProject, StringComparison.InvariantCulture);

                var solutionPath = rootStr.Substring(0, prefix);

                var sensorTypeFile = Path.Combine(solutionPath, @"PrtgAPI\Enums\Serialization\SensorTypeInternal.cs");

                if (!File.Exists(sensorTypeFile))
                {
                    throw new FileNotFoundException($"'{sensorTypeFile}' cannot be found");
                }

                var str = GetSensorTypesInternalText(types);

                File.WriteAllText(sensorTypeFile, str, new UTF8Encoding(false));
            }
            else
            {
                Logger.LogTestDetail($"    All types are up to date; nothing to do");
            }
        }

        public static string GetSensorTypesInternalText(List<MissingSensorType> types)
        {
            var sortedTypes = types.OrderBy(t => t.Name).ToList();

            var builder = new StringBuilder();

            builder.AppendLine("// This code was generated by a tool. Any changes made manually will be lost");
            builder.AppendLine("// the next time this code is regenerated.");
            builder.AppendLine("using System.ComponentModel;");
            builder.AppendLine($"using System.Xml.Serialization;{Environment.NewLine}");

            builder.AppendLine("namespace PrtgAPI");
            builder.AppendLine("{");

            builder.AppendLine("    /// <summary>");
            builder.AppendLine("    /// <para type=\"description\">Specifies types of sensors that can be created in PRTG.</para>");
            builder.AppendLine("    /// </summary>");
            builder.AppendLine("    enum SensorTypeInternal");
            builder.AppendLine("    {");

            for (var i = 0; i < sortedTypes.Count; i++)
            {
                builder.AppendLine("        /// <summary>");
                builder.AppendLine($"        /// {sortedTypes[i].Description}");
                builder.AppendLine("        /// </summary>");
                builder.AppendLine($"        [XmlEnum(\"{sortedTypes[i].Id}\")]");
                builder.AppendLine($"        [Description(\"{sortedTypes[i].Name}\")]");

                var enumName = Regex.Replace(sortedTypes[i].Name, "[^a-zA-Z0-9_]", "");

                enumName = enumName.Replace("BETA", "");

                builder.Append($"        {enumName}");

                if (i < sortedTypes.Count - 1)
                {
                    builder.AppendLine($",{Environment.NewLine}");
                }
                else
                {
                    builder.AppendLine();
                }
            }

            builder.AppendLine("    }");

            builder.Append("}");

            return builder.ToString();
        }
    }
}
