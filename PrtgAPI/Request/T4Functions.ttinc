<#+

    /*********************************************************************************
     * Get Method Signature                                                          *
     *********************************************************************************/

    public string GetSignature(string name, string returnType, int i)
    {
        if(i == 0)
            return $"{returnType} {name}";
        else
        {
            if(returnType == "void")
                returnType = "Task";
            else
                returnType = $"Task<{returnType}>";
        }

        return $"async {returnType} {name}Async";
    }

    public string GetSignatureWithAsyncOnlyToken(string name, string returnType, string parameters, string tokenParameter, int i)
    {
        if(i == 0)
            return $"{returnType} {name}({parameters})";
        else
        {
            if(returnType == "void")
                returnType = "Task";
            else
                returnType = $"Task<{returnType}>";

            parameters += $", CancellationToken {tokenParameter}";
        }

        return $"async {returnType} {name}Async({parameters})";
    }

    public string GetGenericTokenSignature(string name, string returnType, string genericArgs, string parameters, string tokenParameter, int i)
    {
        parameters += $", CancellationToken {tokenParameter}";

        if(i == 0)
            return $"{returnType} {name}<{genericArgs}>({parameters})";
        else
        {
            if(returnType == "void")
                returnType = "Task";
            else
                returnType = $"Task<{returnType}>";
        }

        return $"async {returnType} {name}Async<{genericArgs}>({parameters})";
    }

    /*********************************************************************************
     * Call Function                                                                 *
     *********************************************************************************/

    public string CallFunction(string name, string parameters, int i)
    {
        if(i == 0)
            return $"{name}({parameters})";
        else
            return $"await {name}Async({parameters}).ConfigureAwait(false)";
    }

    public string CallFunctionWithAsyncOnlyToken(string name, string parameters, string tokenParameter, int i)
    {
        if(i == 0)
            return $"{name}({parameters})";
        else
        {
            parameters += ", " + tokenParameter;
        }
            return $"await {name}Async({parameters}).ConfigureAwait(false)";
    }

	public string CallFunctionWithMandatoryTokenWithAsyncTokenOnly(string name, string parameters, string tokenParameter, int i)
    {
        if(i == 0)
            return $"{name}({parameters}, CancellationToken.None)";
        else
        {
            parameters += ", " + tokenParameter;
        }
            return $"await {name}Async({parameters}).ConfigureAwait(false)";
    }

    public string CallGenericAsyncTokenFunction(string name, string parameters, string genericArgs, string tokenParameter, int i)
    {
        if(i == 0)
            return $"{name}<{genericArgs}>({parameters})";
        else
        {
            parameters += ", " + tokenParameter;
        }
            return $"await {name}Async<{genericArgs}>({parameters}).ConfigureAwait(false)";
    }

    public string CallAsyncTokenSpecificFunction(string name, string syncParameters, string asyncParameters, int i)
    {
        if(i == 0)
            return $"{name}({syncParameters})";
        else
            return $"await {name}Async({asyncParameters}).ConfigureAwait(false)";
    }

    public string CallFunc(string name, string parameters, int i)
    {
        if(i == 0)
            return $"{name}({parameters})";
        else
            return $"await {name}({parameters}).ConfigureAwait(false)";
    }

    public string CallGenericFunction(string name, string type, string parameters, int i)
    {
        if(i == 0)
            return $"{name}<{type}>({parameters})";
        else
            return $"await {name}Async<{type}>({parameters}).ConfigureAwait(false)";
    }

    public string AwaitOrForceResult(string function, int i)
    {
        if(i == 0)
            return $"{function}.Result;";
        else
            return $"await {function}.ConfigureAwait(false);";
    }

    public string DeclareLightFunc1(string funcName, string args, string returnType, string function, int i)
    {
        if(i == 0)
            return $"Func<{args}, {returnType}> {funcName} = {function}";
        else
            return $"Func<{args}, Task<{returnType}>> {funcName} = o => Task.FromResult({function}(o))";
    }

    public string DeclareAction0(string variableName, string function, string functionArgs, int i)
    {
        if(i == 0)
            return $"Action {variableName} = () => {function}({functionArgs})";
        else
            return $"Func<Task> {variableName} = async () => await {function}Async({functionArgs}).ConfigureAwait(false)";
    }

    public string DeclareTokenAction0(string variableName, string function, string functionArgs, int i)
    {
        if(i == 0)
            return $"Action<CancellationToken> {variableName} = t => {function}({functionArgs}, t)";
        else
        {
            functionArgs += $", t";

            return $"Func<CancellationToken, Task> {variableName} = async t => await {function}Async({functionArgs}).ConfigureAwait(false)";
        }
    }

    public string DeclareFunc(string variableName, string lambdaArgs, string inputTypes, string function, string args, string functionReturnType, int i)
    {
        if(i == 0)
            return $"Func<{inputTypes}, {functionReturnType}> {variableName} = ({lambdaArgs}) => {function}({args})";
        else
            return $"Func<{inputTypes}, Task<{functionReturnType}>> {variableName} = async ({lambdaArgs}) => await {function}Async({args}).ConfigureAwait(false)";
    }

    public string DeclareFuncFromVariable0(string variableName, string function, string args, string functionReturnType, int i)
    {
        if(i == 0)
            return $"Func<{functionReturnType}> {variableName} = () => {function}({args})";
        else
            return $"Func<Task<{functionReturnType}>> {variableName} = async () => await {function}({args}).ConfigureAwait(false)";
    }

    public string DeclareTokenFuncFromVariable0(string variableName, string function, string args, string functionReturnType, int i)
    {
        if(i == 0)
            return $"Func<CancellationToken, {functionReturnType}> {variableName} = t => {function}({args}, t)";
        else
            return $"Func<CancellationToken, Task<{functionReturnType}>> {variableName} = async t => await {function}({args}, t).ConfigureAwait(false)";
    }

    public string DeclareFuncThen0(string variableName, string function, string args, string functionReturnType, string then, int i)
    {
        if(i == 0)
            return $"Func<{functionReturnType}> {variableName} = () => {function}({args}){then}";
        else
            return $"Func<Task<{functionReturnType}>> {variableName} = async () => (await {function}Async({args}).ConfigureAwait(false)){then}";
    }

    public string DeclareTokenFuncThen0(string variableName, string function, string args, string functionReturnType, string then, int i)
    {
        if(i == 0)
            return $"Func<CancellationToken, {functionReturnType}> {variableName} = t => {function}({args}, t){then}";
        else
        {
            args += $", t";

            return $"Func<CancellationToken, Task<{functionReturnType}>> {variableName} = async t => (await {function}Async({args}).ConfigureAwait(false)){then}";
        }
    }

    public string GetFuncRet(string type, int i)
    {
        if(i == 0)
            return type;
        else
            return $"Task<{type}>";
    }

    public string GetActionParam0(int i)
    {
        if(i == 0)
            return "Action";
        else
            return "Func<Task>";
    }

    public string GetTokenActionParam0(int i)
    {
        if(i == 0)
            return "Action<CancellationToken>";
        else
            return "Func<CancellationToken, Task>";
    }

    public string StartLoopOrTask(string elm, string elms, int i)
    {
        if(i == 0)
            return $"foreach (var {elm} in {elms})";
        else
            return $"await Task.WhenAll({elms}.Select(async {elm} =>";
    }

    public string EndLoopOrTask(int i)
    {
        if(i == 0)
            return "";
        else
            return ")).ConfigureAwait(false);";
    }

    public string WaitOne(string duration, string tokenVar, int i)
    {
        if(i == 0)
            return $"{tokenVar}.WaitHandle.WaitOne({duration}, true);";
        else
            return $"await {tokenVar}.WaitHandle.WaitOneAsync({duration}, {tokenVar}).ConfigureAwait(false);";
    }
#>