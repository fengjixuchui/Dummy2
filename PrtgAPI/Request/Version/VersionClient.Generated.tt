<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="..\T4Functions.ttinc" #>
<#@ output extension=".cs" #>
/***************************************************************************************
 * This code was generated by a tool.                                                  *
 * Please do not modify this file directly - modify VersionClient.Generated.tt instead *
 ***************************************************************************************/
using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using PrtgAPI.Parameters;

namespace PrtgAPI.Request
{
    internal partial class VersionClient
    {
        //######################################
        // SetChannelProperty
        //######################################

<#
for(int i = 0; i < 2; i++)
{
#>
        internal <#= GetSignature("SetChannelProperty", "void", i) #>(int[] sensorIds, int channelId, ChannelParameter[] @params, CancellationToken token)
        {
            var parameters = new SetChannelPropertyParameters(sensorIds, channelId, @params);

            if (NeedChannels(parameters, @params))
            {
                var channels = <#= CallFunction("GetChannels", "null, sensorIds, channelId, token", i) #>;

                <#= CallFunction("SetChannelProperty", "channels, @params, token", i) #>;
            }
            else
                <#= CallFunction("client.SetObjectProperty", "parameters, parameters.SensorIds.Length, token", i) #>;
        }

        internal <#= GetSignature("SetChannelProperty", "void", i) #>(ICollection<Channel> channels, ChannelParameter[] @params, CancellationToken token)
        {
            var grouping = GroupChannels(channels, @params);

            foreach (var group in grouping)
                <#= CallFunction("client.SetObjectProperty", "group.Parameters, group.Parameters.SensorIds.Length, token", i) #>;
        }

<#
}
#>
        //######################################
        // GetTmpId
        //######################################

<#
for(int i = 0; i < 2; i++)
{
#>
        protected <#= GetSignature("GetTmpId", "int?", i) #>(int deviceId, ICommandParameters internalParams, CancellationToken token)
        {
            //Purposely not validating the QueryTarget for addsensor2; when adding the sensor for real we don't really need it, and
            //current evidence suggestly we can simply just ignore it
            var tmpIdParameters = new BeginAddSensorQueryParameters(deviceId, internalParams[Parameter.SensorType].ToString(), SynthesizeParameters(internalParams));
            var tmpId = <#= CallFunction("client.GetAddSensorTmpId", "tmpIdParameters, token", i) #>;

            if (tmpId == null)
                throw new PrtgRequestException($"Failed to add sensor for sensor type '{internalParams[Parameter.SensorType]}': type was not valid or you do not have sufficient permissions on the specified object.");

            return tmpId;
        }
<#
if (i == 0)
    WriteLine("");
}
#>
    }
}