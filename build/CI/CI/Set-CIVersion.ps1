function Set-CIVersion
{
    [CmdletBinding()]
    param(
        [Parameter(Mandatory = $true, Position = 0, ParameterSetName = "Default")]
        [Version]$Version,

        [Parameter(Mandatory = $false, ParameterSetName = "Default")]
        [Parameter(Mandatory = $false, ParameterSetName = "CI")]
        [switch]$IsCore = $true,

        [Parameter(Mandatory = $true, ParameterSetName = "CI")]
        [string]$CIBuild
    )

    Get-CallerPreference $PSCmdlet $ExecutionContext.SessionState

    if ($CIBuild)
    {
        if ($CIBuild -like "*-build.*")
        {
            $Version = $CIBuild -replace "-build",""
            $CIBuild = $null
        }
        else
        {
            $Version = (Get-CIVersion -IsCore:$IsCore).File
        }
    }

    SetVersionProps $Version $IsCore $CIBuild
    SetPsd1Props $Version 
}

function SetVersionProps($version, $isCore, $ciBuild)
{
    $major = $version.Major
    $minor = $version.Minor
    $build = $version.Build
    $revision = $version.Revision

    if($build -eq -1)
    {
        $build = 0
    }

    if($revision -eq -1)
    {
        $revision = 0
    }

    $version = "$major.$minor.$build"
    $assemblyVersion = "$major.$minor.0.0"
    $fileVersion = "$major.$minor.$build.$revision"
    $infoVersion = "$major.$minor.$build"

    if($ciBuild)
    {
        $infoVersion = $ciBuild
    }
    else
    {
        if ($revision -ne 0)
        {
            $infoVersion = "$infoVersion.$revision"
        }
    }

    SetVersionPropsCore $version $assemblyVersion $fileVersion $infoVersion
    SetVersionPropsDesktop $version $assemblyVersion $fileVersion $infoVersion
}

function SetVersionPropsCore($version, $assemblyVersion, $fileVersion, $infoVersion)
{
    $newContent = @"
<!-- This code was generated by a tool. Any changes made manually will be lost -->
<!-- the next time this code is regenerated. -->

<Project>
  <PropertyGroup>
    <Version>$version</Version>
    <AssemblyVersion>$assemblyVersion</AssemblyVersion>
    <FileVersion>$fileVersion</FileVersion>
    <InformationalVersion>$infoVersion</InformationalVersion>
  </PropertyGroup>
</Project>
"@

    $root = Get-SolutionRoot

    $props = Join-Path $root "build\Version.props"

    Set-Content $props $newContent
}

function SetVersionPropsDesktop($version, $assemblyVersion, $fileVersion, $infoVersion)
{
    $newContent = @"
// This code was generated by a tool. Any changes made manually will be lost
// the next time this code is regenerated.

using System.Reflection;

[assembly: AssemblyVersion("$assemblyVersion")]
[assembly: AssemblyFileVersion("$fileVersion")]
[assembly: AssemblyInformationalVersion("$infoVersion")]

"@

    $root = Get-SolutionRoot

    $props = Join-Path $root "src\PrtgAPI\Properties\Version.cs"

    [IO.File]::WriteAllText($props, $newContent)
}

function SetPsd1Props($version)
{
    $root = Get-SolutionRoot
    $psd1Path = Join-Path $root "src\PrtgAPI.PowerShell\PowerShell\Resources\PrtgAPI.psd1"

    if(!(Test-Path $psd1Path))
    {
        throw "Cannot find file '$psd1Path' required for PowerShell Module versioning."
    }

    $psd1Contents = gc $psd1Path

    $major = $version.Major
    $minor = $version.Minor
    $build = $version.Build

    if($build -eq -1)
    {
        $build = 0
    }

    $version = "$major.$minor.$build"

    $newContents = $psd1Contents | foreach {

        if($_ -like "ModuleVersion = '*")
        {
            $newLine = ($_ -replace "ModuleVersion = '(.+?)'","`ModuleVersion = '$version'")

            return $newLine
        }
        elseif($_ -match ".+ReleaseNotes = '.+/tag.+")
        {
            $newLine = $_ -replace "(.+ReleaseNotes = '.+/tag/)(.+)","`$1v$version"

            return $newLine
        }

        $_
    }

    Set-Content $psd1Path $newContents
}